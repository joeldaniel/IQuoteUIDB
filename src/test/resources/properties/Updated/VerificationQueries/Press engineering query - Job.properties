Query=SELECT         \
Distinct \
engTCActivityGroup.ActivityGroupType,  \
engTCPG.Description AS AllocGRPName,  \
engTMRcProcessGroupExtPrint.PressMarginTop,  \
engTMRcProcess.productbycycle, \
engTMRcProcess.IsUserHided,  \
engTMRcProcess.AutoNote AS ProcessNote,  \
engTMRcProcess.RepQty,  \
engTMRcProcessGroup.PSCmpOrder,  \
engTMRcProcessGroup.Description AS ProcessGroupDescription,  \
engTMRcProcess.SequenceOnProcessGroup,  \
engTMRcProcessGroupExtPrint.MediaDescription,  \
engTMRcProcessGroupExtPrint.MediaFormatDescription, engTMRcProcessGroupExtPrint.RepInLayout,  \
engTMRcProcessGroupExtPrint.PrintFormatDescription, engTMRcProcessGroupExtPrint.QtyFrontColor,  \
engTMRcProcessGroupExtPrint.QtyFrontSpecialColor,  \
engTMRcProcessGroupExtPrint.QtyFrontVanish, engTMRcProcessGroupExtPrint.QtyBackColor,  \
engTMRcProcessGroupExtPrint.QtyBackSpecialColor,  \
engTMRcProcessGroupExtPrint.QtyBackVanish, engTMRcProcessGroupExtPrint.TotalPageQty,  \
Process.PlanQtd AS PlanQty, engTMRcProcess.Description AS ProcessDescription,  \
Process.PlanWasteRunQtd,  \
Process.PlanWasteSetupQtd,  \
basTCUnit.Name AS UnitName,  \
basTCUnit.IdUnit,  \
CASE isnull(engTMRcProcessGroupExtPrint.GraphWorkStyleType, 0)  \
WHEN 0 THEN CASE WHEN engTMRcProcessGroupExtPrint.QtyFrontColor > 0 AND  \
engTMRcProcessGroupExtPrint.QtyBackColor > 0 THEN 1 ELSE 0 END WHEN 1 THEN 1 WHEN 2 THEN 2 WHEN 3 THEN 3 WHEN 4 THEN 4 ELSE 5 END AS WorkStyle,  \
engTMRcProcessGroupExtPrint.FormatFoldedDescription, engTMRcProcessGroupExtPrint.FormatUnfoldedDescription, engTMRcProcessGroupExtPrint.PrintWidth, engTMRcProcessGroupExtPrint.PrintHeight,  \
engTCPG.Description AS ProductionGroupDescription, engTMRcProcessGroupExtPrint.PercentUsePaper, engTMRcProcessGroupExtPrint.QtyCutMedia, engTMRcProcessGroupExtPrint.QtyInputPrint,  \
engTMRcProcessGroupExtPrint.MediaWeight, engTMRcProcessGroupExtPrint.MinPrintHeight, engTMRcProcessGroupExtPrint.MinPrintWidth, engTCPG.Description AS PGDescription, \
qttTMQuote.idQuote                             \
FROM plnTMWO WITH (NOLOCK)  \
     INNER JOIN plntmWS on plnTMWO.idws = plntmWS.idws \
	 Inner join qttTMQuote on plnTMWO.idQuote = qttTMQuote.idQuote			      \
     INNER JOIN engTMRcProcessGroup WITH (NOLOCK) ON engTMRcProcessGroup.IDRcStruct = plnTMWO.IDRcStruct  \
	 INNER JOIN engTMRcProcess WITH (NOLOCK) ON engTMRcProcessGroup.IDRcProcessGroup = engTMRcProcess.IDRcProcessGroup AND engTMRcProcess.IsUserHided <> 1  \
	 INNER JOIN engTCPG WITH (NOLOCK) ON engTCPG.IDPG = engTMRcProcess.IDPG AND engTCPG.PGType <> 1  \
	 INNER JOIN engTMRcProcessGroup AS ProcessGroupChild WITH (NOLOCK) ON ProcessGroupChild.IDRcProcessGroupMain = engTMRcProcessGroup.IDRcProcessGroup AND ProcessGroupChild.IsMainProcessGroup = 1  \
	 INNER JOIN engTMRcProcessGroupExtPrint WITH (NOLOCK) ON engTMRcProcessGroupExtPrint.IDRcProcessGroup = CASE WHEN ProcessGroupChild.IDRcProcessGroup <> ProcessGroupChild.IDRcProcessGroupMain THEN \ ProcessGroupChild.IDRcProcessGroup ELSE engtmrcprocessgroup.IDRcProcessGroup END  \
	 INNER JOIN (SELECT IDRcProcess, AVG(PlanQtd) AS PlanQtd, AVG(PlanWasteRunQtd) AS PlanWasteRunQtd, AVG(PlanWasteSetupQtd) AS PlanWasteSetupQtd, UnPlanProdQtd \
                 FROM plnTMProcess WITH (NOLOCK) \
                 GROUP BY IDRcProcess, UnPlanProdQtd) AS Process ON engTMRcProcess.IDRcProcess = Process.IDRcProcess  \
     INNER JOIN plnTCActivity WITH (NOLOCK) ON plnTCActivity.IdActivity = engTMRcProcess.IdActivity  \
     INNER JOIN engTCActivityGroup ON engTCActivityGroup.IdActivityGroup = plnTCActivity.IdActivityGroup  \
     INNER JOIN basTCUnit WITH (NOLOCK) ON basTCUnit.IdUnit = Process.UnPlanProdQtd \
WHERE EXISTS \
  (SELECT 1 AS Expr1 FROM engTMRcProcessFunc \
  WHERE (IDRcProcess = engTMRcProcess.IDRcProcess) AND (IDFunctionalityPrototype IN (1000, 1001, 1002, 1052, 1053, 1070, 1081))) AND (qttTMQuote.idQuote = '##Estimate##')
  
RowCountQuery=SELECT         \
count(*) as rows                            \
FROM plnTMWO WITH (NOLOCK)  \
     INNER JOIN plntmWS on plnTMWO.idws = plntmWS.idws \
	 Inner join qttTMQuote on plnTMWO.idQuote = qttTMQuote.idQuote			      \
     INNER JOIN engTMRcProcessGroup WITH (NOLOCK) ON engTMRcProcessGroup.IDRcStruct = plnTMWO.IDRcStruct  \
	 INNER JOIN engTMRcProcess WITH (NOLOCK) ON engTMRcProcessGroup.IDRcProcessGroup = engTMRcProcess.IDRcProcessGroup AND engTMRcProcess.IsUserHided <> 1  \
	 INNER JOIN engTCPG WITH (NOLOCK) ON engTCPG.IDPG = engTMRcProcess.IDPG AND engTCPG.PGType <> 1  \
	 INNER JOIN engTMRcProcessGroup AS ProcessGroupChild WITH (NOLOCK) ON ProcessGroupChild.IDRcProcessGroupMain = engTMRcProcessGroup.IDRcProcessGroup AND ProcessGroupChild.IsMainProcessGroup = 1  \
	 INNER JOIN engTMRcProcessGroupExtPrint WITH (NOLOCK) ON engTMRcProcessGroupExtPrint.IDRcProcessGroup = CASE WHEN ProcessGroupChild.IDRcProcessGroup <> ProcessGroupChild.IDRcProcessGroupMain THEN \ ProcessGroupChild.IDRcProcessGroup ELSE engtmrcprocessgroup.IDRcProcessGroup END  \
	 INNER JOIN (SELECT IDRcProcess, AVG(PlanQtd) AS PlanQtd, AVG(PlanWasteRunQtd) AS PlanWasteRunQtd, AVG(PlanWasteSetupQtd) AS PlanWasteSetupQtd, UnPlanProdQtd \
                 FROM plnTMProcess WITH (NOLOCK) \
                 GROUP BY IDRcProcess, UnPlanProdQtd) AS Process ON engTMRcProcess.IDRcProcess = Process.IDRcProcess  \
     INNER JOIN plnTCActivity WITH (NOLOCK) ON plnTCActivity.IdActivity = engTMRcProcess.IdActivity  \
     INNER JOIN engTCActivityGroup ON engTCActivityGroup.IdActivityGroup = plnTCActivity.IdActivityGroup  \
     INNER JOIN basTCUnit WITH (NOLOCK) ON basTCUnit.IdUnit = Process.UnPlanProdQtd \
WHERE EXISTS \
  (SELECT 1 AS Expr1 FROM engTMRcProcessFunc \
  WHERE (IDRcProcess = engTMRcProcess.IDRcProcess) AND (IDFunctionalityPrototype IN (1000, 1001, 1002, 1052, 1053, 1070, 1081))) AND (qttTMQuote.idQuote = '##Estimate##')